================================================================================================================
================================================ Day 00 ========================================================
================================================================================================================
Arrays and Strings

Exercises:
--- done ---
0. search
1. quickSort
2. binarySearch
3. hash table
4. Rabin-Karp method (find how many times the substring occur in a string)
--- didn't work on: ---
5. compress
6. decompresses the string of characters received as parameters
7. implement a function, to rotate the picture(a matrix of integer) clockwise
8. return the word in the dictionnary

------------------------------------------
readFile

// fopen(const char *filename, const char *mode) opens the filename pointed to, by filename using the given mode.  
  mode: r, w, a, r+, w+, a+
// fseek(FILE *pointer, long int offset, int position) is used to move file pointer associated with a given file to a specific position.
  pointer: pointer to a FILE object that identifies the stream.
  offset: number of bytes to offset from position
  position: position from where offset is added. Values:
    SEEK_END : It denotes end of the file.
    SEEK_SET : It denotes starting of the file.
    SEEK_CUR : It denotes file pointer’s current position.
// ftell(FILE *stream) returns the current file position of the given stream.
// rewind(FILE *stream) sets the file position to the beginning of the file of the given stream.
// fread(void *ptr, size_t size, size_t nmemb, FILE *stream) reads data from the given stream into the array pointed to, by ptr.
// fclose(FILE *stream) closes the stream. All buffers are flushed.

------------------------------------------
// dprintf(int fd, const char *format, ...) - print to a file descriptor
  The following symbolic constants shall be defined for file streams:
    STDERR_FILENO     File number of stderr; 2.
    STDIN_FILENO      File number of stdin; 0.
    STDOUT_FILENO     File number of stdout; 1.
    

------------------------------------------
Time Complexities of all Sorting Algorithms https://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/

Which is the fastest sorting algorithm?
The time complexity of Quicksort is O(n log n) in the best case, O(n log n) in the average case, and O(n^2) in the worst case. 
But because it has the best performance in the average case for most inputs, Quicksort is generally considered the “fastest” sorting algorithm.
------------------------------------------
Hash Table Program in C https://www.tutorialspoint.com/data_structures_algorithms/hash_table_program_in_c.htm


================================================================================================================
================================================ Day 01 ========================================================
================================================================================================================
Lists, Stacks and Queues

Exercises:
0. circular doubly linked list
1. implement a function that prints all the elements of a linked list in reverse order
2. implement a stack with methods: stackInit, pop, push (recreate the function printReverse but iteratively)
3. implement a stack (defined below), but for this time, the "pop" and "push" function must be in O(1) time and O(1) space
4. implement queue with methods: queueInit(), enqueue(queue, message), dequeue(queue), peek(queue), isEmpty(queue).
5. implement a tank stack
6. implement a f-n that returns the n-th elements from the end of a linked list(Your function must go through the list only one time).
7. game: implement a function that returns a copy of the board, with the linked list passed as a parameter.
8. game


================================================================================================================
================================================ Day 02 ========================================================
================================================================================================================
Sort Algorithms

0. sort linked list
1. insertion Sort
2. quick Sort
3. merge sort
4. count sort
5. Implement f-n that searches in the array for the value and returns the index
6. radix sort
7. modified count sort --> divide and conquer sort
8. external sort
9. answer to question which sort algorithm 

================================================================================================================
================================================ Day 03 ========================================================
================================================================================================================
Trees and Graphs

0. binary tree - is it BST? - is it balanced?
1. balanced BST
2. n-ary tree -> create a f-n which returns a first common ancestor
3. create a f-n able to switch a min-heap to a max-heap
4. create a f-n to insert a new ape in the tree
5. prefix tree


================================================================================================================
================================================ Day 04 ========================================================
================================================================================================================
Bit Manipulation

0. sum of the two binary representation numbers
1. & | ~ operations
2. >> << arithmetic shift
3. ^ xor
4. vacant/occupied place
5. clearPlace
6. setPlace
7. updatePlace
8. isFilled
9. occupiedPlaces
10. carPosition
11. carPosition using mathematical f-n
12. clearBits
13. leftmostCar
14. rightmostCar
15. longestSequence
16. bit array
17. song
18. if a and b equal
19. unique can
20.


Resources:
(0) Binary Arithmetic https://www.tutorialspoint.com/computer_logical_organization/binary_arithmetic.htm
(1) Bitwise Operators in C https://www.tutorialspoint.com/cprogramming/c_bitwise_operators.htm
    Bitwise Operators in C  http://www2.mta.ac.il/~hbinsky/c%20content/Bits.pdf
    Bitwise Operators in C Programming https://www.programiz.com/c-programming/bitwise-operators
(2)
When shifting left, there is no difference between arithmetic and logical shift. When shifting right, the type of shift depends on the type of the value being shifted.

Logical Shift
A Left Logical Shift of one position moves each bit to the left by one. The vacant least significant bit (LSB) is filled with zero and the most significant bit (MSB) is discarded.
A Right Logical Shift of one position moves each bit to the right by one. The least significant bit is discarded and the vacant MSB is filled with zero.

Arithmetic Shift
A Left Arithmetic Shift of one position moves each bit to the left by one. The vacant least significant bit (LSB) is filled with zero and the most significant bit (MSB) is discarded. It is identical to Left Logical Shift.
A Right Arithmetic Shift of one position moves each bit to the right by one. The least significant bit is discarded and the vacant MSB is filled with the value of the previous (now shifted one position to the right) MSB.
Shift Right Arithmetic http://chortle.ccsu.edu/assemblytutorial/Chapter-14/ass14_13.html

Are the shift operators (<<, >>) arithmetic or logical in C? https://stackoverflow.com/questions/7622/are-the-shift-operators-arithmetic-or-logical-in-c

(3) xor
The result of bitwise XOR operator is 1 if the corresponding bits of two operands are opposite. It is denoted by ^.


================================================================================================================
================================================ Day 05 ========================================================
================================================================================================================
Recursive programming

0.
1.
2.
3.
4.
5.
6.
7.
8.

================================================================================================================
================================================ Day 06 ========================================================
================================================================================================================
Greedy Algoritms

0.
1.
2.
3.
4.
5.
6.

================================================================================================================
================================================ Day 07 ========================================================
================================================================================================================
Algorithms

0. heap sort
1. deque data structure 
2. balanced BST
3. undirected graph, queue
4. 
5.

