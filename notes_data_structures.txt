============================ Array ============================
An array is collection of items stored at continuous memory locations.
// A character array in C/C++/Java
char arr1[] = {'g', 'e', 'e', 'k', 's'};

// An Integer array in C/C++/Java
int arr2[] = {10, 20, 30, 40, 50};
int arr[6] = { 10, 20, 30, 40 };    //  Array declaration by specifying size and initializing elements

arr1[0];    // gives us 'g'
arr2[3];    // gives us 40

Usually, an array of characters is called a ‘string’, 
whereas an array of ints or floats is called simply an array.

----------- Array Rotations -----------
??METHOD 1 (Using temp array)
METHOD 2 (Rotate one by one)
?? METHOD 3 (A Juggling Algorithm)
Method 4 (The Reversal Algorithm)
Block swap algorithm 

An element in a sorted array can be found in O(log n) time via binary search. (выполненный через рекурсию)
Start by finding pivot(середину массива) = (maxIndex + minIndex)/2

/* Standard Binary Search function*/
int binarySearch(int arr[], int low, int high, int key) 
{ 
   if (high < low) 
       return -1; 
   int mid = (low + high)/2;  /*low + (high - low)/2;*/
   if (key == arr[mid]) 
       return mid; 
   if (key > arr[mid]) 
       return binarySearch(arr, (mid + 1), high, key); 
   return binarySearch(arr, low, (mid -1), key); 
} 

----------- Arrangement Rearrangement -----------
> to reverse an array or string
    Method 1: Iterative way
    Method 2: Recursive Way
> Move all zeroes to end of array
    Method 1: Traverse the array
                int count = 0;
                for (int i = 0; i < n; i++) 
                    if (arr[i] != 0) 
                        arr[count++] = arr[i]; 
                while (count < n) 
                    arr[count++] = 0; 
    Method 2: Using single traversal: swap
                moveZerosToEnd(arr, n)
                    Initialize count = 0
                    for i = 0 to n-1
                        if (arr[i] != 0) then
                            swap(arr[count++], arr[i])

----------- Order Statistics -----------
----------- Range Queries -----------
MO’s Algorithm
----------- Searching and Sorting -----------
----------- Optimization Problems -----------
----------- Matrix -----------
----------- Misc -----------
----------- Quick Links -----------

============================ Linked List ============================
node (with a data field) + link to the next node

A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. 
The elements in a linked list are linked using pointers.
In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) 
to the next node in the list. 

Advantages over arrays
1) Dynamic size
2) Ease of insertion/deletion

Drawbacks:
1) Random access is not allowed. 
2) Extra memory space for a pointer is required with each element of the list.
3) Not cache friendly. 

Representation:
A linked list is represented by a pointer to the first node of the linked list. The first node is called head. 
If the linked list is empty, then value of head is NULL.
Each node in a list consists of at least two parts:
1) data
2) Pointer (Or Reference) to the next node
In C, we can represent a node using structures.
In Java, LinkedList can be represented as a class and a Node as a separate class.



// A linked list node in C
struct Node 
{ 
  int data; 
  struct Node *next; 
}; 

// Program to create a simple linked list with 3 nodes 
int main() 
{ 
  struct Node* head = NULL; 
  struct Node* second = NULL; 
  struct Node* third = NULL; 
    
  // allocate 3 nodes in the heap   
  head = (struct Node*)malloc(sizeof(struct Node));  
  second = (struct Node*)malloc(sizeof(struct Node)); 
  third = (struct Node*)malloc(sizeof(struct Node)); 
    
  head->data = 1;           //assign data in first node 
  head->next = second;      // Link first node with the second node  
    
  second->data = 2;         // assign data to second node  
  second->next = third;     // Link second node with the third node 
    
  third->data = 3; //assign data to third node 
  third->next = NULL;      
  // We can traverse the complete list by following next pointers.
  
  printList(head); 

  return 0; 
} 

// This function prints contents of linked list starting from the given node 
void printList(struct Node *n) 
{ 
  while (n != NULL) 
  { 
     printf(" %d ", n->data); 
     n = n->next; 
  } 
} 

A node can be added in three ways
1) At the front of the linked list  (before the head)
2) After a given node.      new_node->next = prev_node->next;  
    void insertAfter(struct Node* prev_node, int new_data) 
    { 
        /*1. check if the given prev_node is NULL */ 
        if (prev_node == NULL)  
        {  
        printf("the given previous node cannot be NULL");        
        return;   
        }   
            
        /* 2. allocate new node */
        struct Node* new_node =(struct Node*) malloc(sizeof(struct Node)); 
    
        /* 3. put in the data  */
        new_node->data  = new_data; 
    
        /* 4. Make next of new node as next of prev_node */
        new_node->next = prev_node->next;  
    
        /* 5. move the next of prev_node as new_node */
        prev_node->next = new_node; 
    } 
3) At the end of the linked list.

To delete a node from linked list, we need to do following steps.
1) Find previous node of the node to be deleted.
2) Change the next of previous node.
3) Free memory for the node to be deleted.      free(temp); 

> Write a function to delete a Linked List.
> Find Length of a Linked List (Iterative and Recursive)
> Search an element in a Linked List (Iterative and Recursive)

** Singly Linked List
** Doubly Linked List (DLL) contains an extra pointer, typically called previous pointer, together with 
    next pointer and data which are there in singly linked list.
    /* Node of a doubly linked list */
    struct Node { 
        int data; 
        struct Node* next; // Pointer to next node in DLL 
        struct Node* prev; // Pointer to previous node in DLL 
    };
** Circular linked list is a linked list where all nodes are connected to form a circle. There is no NULL 
    at the end. A circular linked list can be a singly circular linked list or doubly circular linked list.


============================ Stack ============================
Stack is a linear data structure which follows a particular order - LIFO(Last In First Out) 
example: plates in the canteen

Mainly the following three basic operations are performed in the stack:
Push:           Adds an item in the stack. If the stack is full, then it is said to be an Overflow condition.
Pop:            Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.
Peek or Top:    Returns top element of stack.
isEmpty:        Returns true if stack is empty, else false.

There are two ways to implement a stack:
    Using array
    Using linked list


============================ Queue ============================
A Queue is a linear structure which follows a particular order - First In First Out (FIFO)

The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; 
in a queue, we remove the item the least recently added.

Mainly the following four basic operations are performed on queue:
Enqueue:    Adds an item to the queue. If the queue is full, then it is said to be an Overflow condition.
Dequeue:    Removes an item from the queue. The items are popped in the same order in which they are pushed. If the queue is empty, then it is said to be an Underflow condition.
Front:      Get the front item from queue.
Rear:       Get the last item from queue.

There are two ways to implement a queue:
    Using array
    Using linked list

Deque (Double Ended Queue) is a generalized version of Queue data structure that allows insert and delete at both ends.
Circular Queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle.


============================ Binary Tree ============================
A tree whose elements have at most 2 children is called a binary tree.
Since each element in a binary tree can have only 2 children, we typically name them the left and right child.

A tree is represented by a pointer to the topmost node in tree. If the tree is empty, then value of root is NULL.
A Binary Tree node contains following parts.
    Data
    Pointer to left child
    Pointer to right child

Unlike Arrays, Linked Lists, Stack and queues, which are linear data structures, trees are hierarchical data structures.

Tree Vocabulary: 
    The topmost node is called root of the tree. 
    The elements that are directly under an element are called its children. 
    The element directly above something is called its parent. For example, ‘a’ is a child of ‘f’, and ‘f’ is the parent of ‘a’. 
    Finally, elements with no children are called leaves.

Why Trees?
1. One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the file system on a computer.
2. ....

// tree node
struct node  
{ 
  int data; 
  struct node *left; 
  struct node *right; 
};

The maximum number of nodes at level ‘l’ of a binary tree is 2^(l-1). For root, l = 1, number of nodes = 2^(1-1) = 1

Types of Binary Tree:
    - Full      -  a binary tree in which all nodes except leaves have 2 children.
    - Complete  - if all levels are completely filled except possibly the last level and the last level has all keys as left as possible
    - Perfect   - all internal nodes have two children and all leaves are at the same level.
    - Balanced  - if the height of the tree is O(Log n) where n is the number of nodes. 
    - degenerate (or pathological) - every internal node has one child.

Trees can be represented in two way:
1) Dynamic Node Representation (Linked Representation).
2) Array Representation (Sequential Representation).

Tree Traversals (Inorder, Preorder and Postorder)
Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, 
trees can be traversed in different ways. 
    1
   / \
  2   3
 / \
4   5

Depth First Traversals:
(a) Inorder (Left, Root, Right) : 4 2 5 1 3
(b) Preorder (Root, Left, Right) : 1 2 4 5 3
(c) Postorder (Left, Right, Root) : 4 5 2 3 1

Breadth First or Level Order Traversal : 1 2 3 4 5


============================ Binary Search Tree ============================
Binary Search Tree is a node-based binary tree data structure which has the following properties:
    The left subtree of a node contains only nodes with keys lesser than the node’s key.
    The right subtree of a node contains only nodes with keys greater than the node’s key.
    The left and right subtree each must also be a binary search tree.

Searching a key
To search a given key in Binary Search Tree, we first compare it with root, 
    if the key is present at root, we return root. 
    If key is greater than root’s key, we recur for right subtree of root node. 
    Otherwise we recur for left subtree.

// C function to search a given key in a given BST 
struct node* search(struct node* root, int key) 
{ 
    // Base Cases: root is null or key is present at root 
    if (root == NULL || root->key == key) 
       return root; 
     
    // Key is greater than root's key 
    if (root->key < key) 
       return search(root->right, key); 
  
    // Key is smaller than root's key 
    return search(root->left, key); 
} 


============================ Heap ============================
A Heap is a special Tree-based data structure in which the tree is a complete binary tree. 

Heaps can be of two types:
Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.
Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.

============================ Hashing ============================
Hashing is an important Data Structure which is designed to use a special function called the Hash function 
which is used to map a given value with a particular key for faster access of elements.
Let a hash function H(x) maps the value x at the index x%10 in an Array. For example if the list of values 
is [11,12,13,14,15] it will be stored at positions {1,2,3,4,5} in the array or Hash table respectively.

The idea of Hashing is to use hash function that converts a given phone number or any other key to a smaller 
number and uses the small number as index in a table called hash table.

** Hash Function: A function that converts a given big phone number to a small practical integer value. The mapped integer value is used as an index in hash table. In simple terms, a hash function maps a big number or string to a small integer that can be used as index in hash table.
** Hash Table: An array that stores pointers to records corresponding to a given phone number. An entry in hash table is NIL if no existing phone number has hash function value equal to the index for the entry.
** Collision Handling: Since a hash function gets us a small number for a big key, there is possibility that two keys result in same value. 
    Ways to handle collisions:
        1) Chaining:The idea is to make each cell of hash table point to a linked list of records that have same hash function value. Chaining is simple, but requires additional memory outside the table.
        2) Open Addressing: In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table.


============================ Graph ============================
A Graph consists of a finite set of vertices(or nodes) and set of Edges which connect a pair of nodes.
Example: the set of vertices V = {0,1,2,3,4} and the set of edges E = {01, 12, 23, 34, 04, 14, 13}.

Graphs are used to solve many real-life problems. Graphs are used to represent networks. The networks may include 
paths in a city or telephone network or circuit network. Graphs are also used in social networks like linkedIn, Facebook.

Commonly used representations of a graph:
1. Adjacency Matrix     is a 2D array of size V x V where V is the number of vertices in a graph.
2. Adjacency List       An array of lists is used. Size of the array is equal to the number of vertices. 
3. Incidence Matrix 
4. Incidence List

> Breadth First Search/Traversal (BFS)
    Queue is used for BFS
> Depth First Search/Traversal (DFS)        is an algorithm (or technique) for traversing a graph.
    Stack is used for DFS. DFS can also be implemented using recursion.


============================ Matrix ============================
A matrix represents a collection of numbers arranged in an order of rows and columns. It is necessary to enclose 
the elements of a matrix in parentheses or brackets.

============================ Misc ============================
Commonly Asked Data Structure Interview Questions

1) What is a Data Structure?
A data structure is a way of organizing the data so that the data can be used efficiently. Different kinds of 
data structures are suited to different kinds of applications, and some are highly specialized to specific tasks.

2) What are linear and non linear data Structures?
Linear: A data structure is said to be linear if its elements form a sequence or a linear list. 
Examples: Array. Linked List, Stacks and Queues
Non-Linear: A data structure is said to be non-linear if traversal of nodes is nonlinear in nature. 
Example: Graph and Trees.

3) What are the various operations that can be performed on different Data Structures?
Insertion    Add a new data item in the given collection of data items.
Deletion     Delete an existing data item from the given collection of data items.
Traversal    Access each data item exactly once so that it can be processed.
Searching    Find out the location of the data item if it exists in the given collection of data items.
Sorting      Arranging the data items in some order i.e. in ascending or descending order in case of numerical data and in dictionary order in case of alphanumeric data.



============================ Advanced Data Structure ============================
1) Advanced Lists:
2) Segment Tree:
3) Trie:
